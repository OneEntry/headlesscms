package com.example.oneentry

import android.annotation.SuppressLint
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavHostController
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.navArgument
import androidx.paging.compose.collectAsLazyPagingItems
import com.example.oneentry.view.DetailsView
import com.example.oneentry.view.FilterView
import com.example.oneentry.view.HomeView
import com.example.oneentry.view.SettingsView
import com.example.oneentry.viewModel.FilterViewModel
import com.example.oneentry.viewModel.MainViewModel
import com.example.oneentry.viewModel.SearchViewModel

@SuppressLint("StateFlowValueCalledInComposition")
@Composable
fun SetupNavigationGraph(
    navController: NavHostController,
    mainViewModel: MainViewModel
) {

    val searchViewModel: SearchViewModel = hiltViewModel()
    val filterViewModel: FilterViewModel = hiltViewModel()
    val locales by mainViewModel.locales.collectAsState()

    NavHost(
        navController = navController,
        startDestination = Screen.HomeScreen.route
    ) {

        composable(
            route = Screen.HomeScreen.route
        ) {

            HomeView(
                navigationController = navController,
                searchViewModel = searchViewModel,
                mainViewModel = mainViewModel
            )
        }

        composable(
            route = Screen.DetailsScreen.route + "/{item_id}",
            arguments = listOf(navArgument("item_id") { type = NavType.IntType})
        ) {

            val productId = it.arguments?.getInt("item_id")
            mainViewModel.getCurrentProduct(productId!!)

            mainViewModel.currentProduct.value?.let { item ->

                DetailsView(
                    item = item,
                    mainViewModel = mainViewModel,
                    navController = navController
                )
            }
        }

        composable(
            route = Screen.SettingsScreen.route
        ) {

            SettingsView(
                locales = locales,
                mainViewModel = mainViewModel
            )
        }

        composable(
            route = Screen.FilterScreen.route
        ) {

            FilterView(
                mainViewModel = mainViewModel,
                navController = navController,
                filterViewModel = filterViewModel
            )
        }
    }
}