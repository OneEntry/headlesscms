package com.example.oneentry.viewModel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.oneentry.model.ConditionMarker
import com.example.oneentry.model.ProductModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class FilterViewModel: ViewModel() {

    private val _attributeMarker = MutableStateFlow("")
    val attributeMarker = _attributeMarker.asStateFlow()

    private val _conditionMarker = MutableStateFlow("")
    val conditionMarker = _conditionMarker.asStateFlow()

    private val _filterProducts = MutableStateFlow<ProductModel?>(null)
    val filterProducts = _filterProducts.asStateFlow()

    fun updateAttributeValue(attribute: String) {

        viewModelScope.launch {

            _attributeMarker.emit(attribute)
        }
    }

    fun getCodeForCondition(condition: String): String {

        when (condition) {

            "contains" -> return ConditionMarker.`in`.name
            "does not contain" -> return ConditionMarker.nin.name
            "equal to" -> return ConditionMarker.eq.name
            "not equal to" -> return ConditionMarker.neq.name
            "more" -> return ConditionMarker.mth.name
            "less" -> return ConditionMarker.lth.name
            "contains any value" -> return ConditionMarker.exs.name
            "does not contain a value" -> return ConditionMarker.nexs.name
        }

        return ConditionMarker.`in`.name
    }

    fun updateConditionValue(condition: String) {

        viewModelScope.launch {

            _conditionMarker.emit(condition)
        }
    }

    fun updateFilterProducts(products: ProductModel) {

        viewModelScope.launch {

            _filterProducts.emit(products)
        }
    }
}