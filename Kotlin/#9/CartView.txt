package com.example.oneentry.view

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.oneentry.Screen
import com.example.oneentry.item.ProductItemOrder
import com.example.oneentry.model.ItemsModel
import com.example.oneentry.network.DatabaseProvider
import com.example.oneentry.viewModel.MainViewModel
import com.example.oneentry.viewModel.OrderViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

@Composable
fun CartView(
    orderViewModel: OrderViewModel,
    mainViewModel: MainViewModel,
    navController: NavController
) {

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(15.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Top
    ) {

        val items = remember { mutableStateListOf<ItemsModel?>() }
        val productsId by orderViewModel.orderProductsId.collectAsState()

        LaunchedEffect(productsId) {

            productsId?.forEach { productId ->

                val newItem = withContext(Dispatchers.IO) {
                    DatabaseProvider.getProduct(productId)
                }
                items.add(newItem)
            }
        }

        Column(
            verticalArrangement = Arrangement.spacedBy(10.dp)
        ) {

            items.forEach {

                it?.let {

                    ProductItemOrder(it, mainViewModel, orderViewModel) {

                        navController.navigate(route = Screen.DetailScreen.route + "/${it.id}")
                    }
                }
            }
        }
    }
}