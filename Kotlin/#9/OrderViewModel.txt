package com.example.oneentry.viewModel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.oneentry.model.StatusModel
import com.example.oneentry.network.DatabaseProvider
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class OrderViewModel: ViewModel() {

    private val _countProduct = MutableStateFlow(1)
    val countProduct = _countProduct.asStateFlow()

    private val _orderProductsId = MutableStateFlow<List<Int>?>(null)
    val orderProductsId = _orderProductsId.asStateFlow()

    private val _status = MutableStateFlow<StatusModel?>(null)
    val status = _status.asStateFlow()
    
    val listId = mutableListOf<Int>()

    fun updateCountProduct(count: Int) {

        viewModelScope.launch {

            _countProduct.emit(count)
        }
    }

    fun addProductId(listId: List<Int>) {

        viewModelScope.launch {

            _orderProductsId.emit(listId)
        }
    }

    fun getStatusId(statusId: Int) {

        viewModelScope.launch {

            _status.value = DatabaseProvider.getStatus(statusId)
        }
    }
}