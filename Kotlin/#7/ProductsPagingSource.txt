package com.example.oneentry.network

import androidx.paging.PagingSource
import androidx.paging.PagingState
import com.example.oneentry.model.ProductModel
import com.example.oneentry.viewModel.MainViewModel
import kotlinx.coroutines.flow.StateFlow

class ProductsPagingSource(
    mainViewModel: MainViewModel,
    private val langCode: StateFlow<String>
): PagingSource<Int, ProductModel>() {

    private val limit = 30
    private var total = 0
    private val pageUrl = mainViewModel.pageUrl.value

    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, ProductModel> {

        return try {

            val currentPage = params.key ?: 0
            val response = OneEntryProvider.getProducts(pageUrl, langCode.value, limit, currentPage)
            total = response.total
            val data = mutableListOf<ProductModel>()

            data.addAll(listOf(response))

            LoadResult.Page(
                data = data,
                prevKey = null,
                nextKey = if (currentPage * limit <= total) currentPage.plus(1) else throw Exception("End pagination")
            )
        } catch (error: Exception) {

            LoadResult.Error(error)
        }
    }

    override fun getRefreshKey(state: PagingState<Int, ProductModel>): Int? {

        return null
    }
}