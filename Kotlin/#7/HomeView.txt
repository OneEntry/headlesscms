@SuppressLint("CoroutineCreationDuringComposition")
@Composable
fun HomeView(
    navController: NavController,
    mainViewModel: MainViewModel,
    searchViewModel: SearchViewModel,
) {

    var productsFlow = mainViewModel.products
    val scaffoldState = rememberScaffoldState()

    Scaffold(
        scaffoldState = scaffoldState,
        topBar = {

            SearchBar(
                searchViewModel = searchViewModel,
                mainViewModel = mainViewModel,
                navigationController = navController
            )
        }
    ) {

        Box(modifier = Modifier.padding(it)) {

            val isLoading = remember { mutableStateOf(false) }
            val swipeRefreshState = rememberSwipeRefreshState(isRefreshing = isLoading.value)

            SwipeRefresh(
                state = swipeRefreshState,
                onRefresh = {

                    isLoading.value = true

                    productsFlow = Pager(PagingConfig(1)) {
                        ProductsPagingSource(mainViewModel, mainViewModel.lang)
                    }.flow.cachedIn(CoroutineScope(Dispatchers.Main))

                    isLoading.value = false
                },
                indicator = { state, refreshTrigger ->

                    SwipeRefreshIndicator(
                        state = state,
                        refreshTriggerDistance = refreshTrigger,
                        backgroundColor = greyButton,
                        contentColor = grey
                    )
                }
            ) {

                val products = productsFlow.collectAsLazyPagingItems()

                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .verticalScroll(rememberScrollState())
                        .padding(horizontal = 15.dp),
                ) {

                    val context = LocalContext.current
                    val height = getScreenHeight(context = context)

                    Log.e("Products", products.itemSnapshotList.items.toString())

                    when (products.loadState.refresh) {

                        is LoadState.Loading -> {

                            CircularProgressIndicator(
                                modifier = Modifier
                                    .padding(top = (height / 2 - 70).dp)
                                    .align(Alignment.CenterHorizontally),
                                color = orange
                            )
                        }

                        is LoadState.Error -> {

                            NoDataItem()
                        }

                        else -> {

                            products.itemSnapshotList.items.forEach {

                                it.items.forEach { item ->

                                    ProductItemMedium(item, mainViewModel) {

                                        navController.navigate(route = Screen.DetailScreen.route + "/${item.id}")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}