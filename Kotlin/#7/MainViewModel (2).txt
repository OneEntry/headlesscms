package com.example.oneentry.viewModel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.paging.Pager
import androidx.paging.PagingConfig
import androidx.paging.cachedIn
import com.example.oneentry.model.ItemsModel
import com.example.oneentry.model.LocalesModel
import com.example.oneentry.model.MenuModel
import com.example.oneentry.model.ProductModel
import com.example.oneentry.network.OneEntryProvider
import com.example.oneentry.network.ProductsPagingSource
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch

class MainViewModel: ViewModel() {

    private val _menus = MutableStateFlow<MenuModel?>(null)

    private val _locales = MutableStateFlow<List<LocalesModel>?>(null)
    val locales = _locales.asStateFlow()

    private val _lang = MutableStateFlow("en_US")
    val lang = _lang.asStateFlow()

    private val _pageUrl = MutableStateFlow("heroes")
    val pageUrl = _pageUrl.asStateFlow()

    val products = Pager(PagingConfig(pageSize = 1)) {
        ProductsPagingSource(this, lang)
    }.flow.cachedIn(viewModelScope)

    private val _currentProduct = MutableStateFlow<ItemsModel?>(null)
    val currentProduct = _currentProduct.asStateFlow()

    private val _relatedProduct = MutableStateFlow<ProductModel?>(null)
    val relatedProduct = _relatedProduct.asStateFlow()

    init {
        getProducts()
        getLocalesInfo()
    }

    private fun getProducts() {

        viewModelScope.launch {

            try {

                _menus.value = OneEntryProvider.getMenu("categories")
                _menus.value?.let {

                    _pageUrl.value = it.pages.first().pageUrl
                }
            } catch (error: Exception) {

                Log.e("ViewModel Error", error.toString())
            }
        }
    }

    fun getRelatedProduct(productId: Int) {

        viewModelScope.launch {

            try {

                _relatedProduct.value = OneEntryProvider.getRelatedProduct(productId, lang.value)

            } catch (error: Exception) {

                Log.e("Related product error", error.toString())
            }
        }
    }

    fun getCurrentProduct(id: Int) {

        viewModelScope.launch {

            _currentProduct.update {

                OneEntryProvider.getProduct(id, lang.value)
            }
        }
    }

    private fun getLocalesInfo() {

        viewModelScope.launch {

            try {

                _locales.value = OneEntryProvider.getLocalesInfo()

            } catch (error: Exception) {

                Log.e("Get locales error", error.toString())
            }
        }
    }

    fun updateCurrentLocale(langCode: String) {

        viewModelScope.launch {

            _lang.emit(langCode)
        }
    }
}