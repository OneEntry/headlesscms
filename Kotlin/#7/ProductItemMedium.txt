@Composable
fun ProductItemMedium(
    item: ItemsModel,
    mainViewModel: MainViewModel,
    action: () -> Unit
) {

    val language by mainViewModel.lang.collectAsState()
//    Log.e("ProductItem lang", language)

    Box(
        modifier = Modifier
            .padding(top = 30.dp)
            .clip(RoundedCornerShape(15.dp))
            .clickable { action() }
            .background(greyButton)
            .fillMaxWidth()
    ) {
        Row(
            modifier = Modifier
                .fillMaxSize()
        ) {

            var items = item.attributeValues[language]

            if (items != null) {

                Column(
                    modifier = Modifier
                        .padding(5.dp)
                        .fillMaxHeight()
                        .weight(2f)
                        .background(
                            color = greyProduct,
                            shape = RoundedCornerShape(15.dp)
                        ),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {

                    val type = object : TypeToken<List<ImageModel>>() {}.type
                    val gson = GsonBuilder().create()
                    val image = gson.fromJson<List<ImageModel>>(items?.get("image")?.value, type)

//                Log.e("Grade", items?.get("grade")?.value?.asFloat.toString())

                    AsyncImage(
                        model = image.first().downloadLink,
                        contentDescription = null,
                        modifier = Modifier
                            .padding(top = 5.dp)
                            .size(100.dp)
                    )

                    Row(
                        modifier = Modifier
                            .padding(top = 15.dp, bottom = 15.dp)
                            .background(
                                color = orange,
                                shape = RoundedCornerShape(30.dp)
                            )
                            .width(70.dp),
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.star),
                            contentDescription = null,
                            modifier = Modifier
                                .size(20.dp),
                            tint = Color.White
                        )
                        Text(
                            text = items?.get("grade")?.value?.asFloat.toString(),
                            color = Color.White,
                            fontFamily = Lato,
                            fontWeight = FontWeight.Bold,
                            fontSize = 15.sp
                        )
                    }
                }

                Column(
                    modifier = Modifier
                        .fillMaxHeight()
                        .weight(3f)
                        .background(Color.Transparent)
                        .padding(start = 20.dp)
                        .padding(vertical = 20.dp),
                    verticalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(
                        text = items?.get("title")?.value?.asString.toString(),
                        color = Color.Black,
                        fontFamily = Lato,
                        fontWeight = FontWeight.Medium,
                        fontSize = 20.sp
                    )

                    Text(
                        text = "$ ${items?.get("price")?.value?.asInt.toString()}",
                        color = orange,
                        fontFamily = Lato,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp
                    )
                }
            } else {

                items = item.attributeValues["en_US"]

                Column(
                    modifier = Modifier
                        .padding(5.dp)
                        .fillMaxHeight()
                        .weight(2f)
                        .background(
                            color = greyProduct,
                            shape = RoundedCornerShape(15.dp)
                        ),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {

                    val type = object : TypeToken<List<ImageModel>>() {}.type
                    val gson = GsonBuilder().create()
                    val image = gson.fromJson<List<ImageModel>>(items?.get("image")?.value, type)

//                Log.e("Grade", items?.get("grade")?.value?.asFloat.toString())

                    AsyncImage(
                        model = image.first().downloadLink,
                        contentDescription = null,
                        modifier = Modifier
                            .padding(top = 5.dp)
                            .size(100.dp)
                    )

                    Row(
                        modifier = Modifier
                            .padding(top = 15.dp, bottom = 15.dp)
                            .background(
                                color = orange,
                                shape = RoundedCornerShape(30.dp)
                            )
                            .width(70.dp),
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.star),
                            contentDescription = null,
                            modifier = Modifier
                                .size(20.dp),
                            tint = Color.White
                        )
                        Text(
                            text = items?.get("grade")?.value?.asFloat.toString(),
                            color = Color.White,
                            fontFamily = Lato,
                            fontWeight = FontWeight.Bold,
                            fontSize = 15.sp
                        )
                    }
                }

                Column(
                    modifier = Modifier
                        .fillMaxHeight()
                        .weight(3f)
                        .background(Color.Transparent)
                        .padding(start = 20.dp)
                        .padding(vertical = 20.dp),
                    verticalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(
                        text = items?.get("title")?.value?.asString.toString(),
                        color = Color.Black,
                        fontFamily = Lato,
                        fontWeight = FontWeight.Medium,
                        fontSize = 20.sp
                    )

                    Text(
                        text = "$ ${items?.get("price")?.value?.asInt.toString()}",
                        color = orange,
                        fontFamily = Lato,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp
                    )
                }
            }
        }
    }
}